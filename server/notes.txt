1- HTTP Requst {
  Headers: ...
  body of request: (for exampile: name=name&password=password) // icoded state
}
2- Express server will genrate Requst Oject (the req argument in the route handler).
  by default Request Object does not have a body proprty.
3- Request Object passed in to bodyParser Middleware.
4- the bodyParser Middleware inspect the incoming HTTP Request (in step 1) and see it has an actule body attched to it.
  so the bodyParser is then going to parse that information right there (body of request) and attch it to Request Object (in step 2).
_____________________________________________________________________________________
Middleware in General:
- Middleware does some processing of Request and Response.
{req, res, next} --> Middleware (does some processing) --> Call next()
- if there is np next Middleware, then the next function will be our request handler.
_____________________________________________________________________________________
Decorators:
  - function that can be used to modify/change/anything different properties/methods in the class.
  - Not the same as javascript decorators.
  - used inside/on classes only.
  - Understanding the order in which decorators are run are the key to understanding them.
  - Experimental.
_____________________________________________________________________________________
Metadata:
  - Proposed feature to be added to Javascript (and thus, TS).
  - Snippets of info that can be tied to a method, property, or class definition.
  - Can be used for super custom stuff.
  - Typescript will (optionally) provide type information as metadata.
  - Read and written using the reflect-metadata package.
_____________________________________________________________________________________