Typescript
-----------
Types:
  - Easy way to refer to different properties and functions that a value has.
  - In the world of Typescript we hve tow different categories of types:
    1- Primitive Types: number, boolean, void, undefined, string, symbol, null.
    2- Object Types: functions, arrays, classes, objects.
  - We use types everywhere.
q1: What is a type?
answer: An shortcut to refer to the different properties and functions that a value has.
q2: In Typescript, what has a type?
answer: Any value.
q3: Why do we care about types?
answer: They give the Typescript compiler information to analyze our code for errors.
------------
Type Annotations:
  - Type Annotations => Code we add to tell Typescript what type of value that a variable can refers to.
  - Type inference => Typescript try to figure out what type of value that a variable can refers to.
  - Typescript can try to guess at the type of a variable based on what you assign to it.
  - we use Type Annotations in trhee scenarios: (variables.ts line 45)
    1- When the function return the 'Any' type, and we need to clarify the value.
    2- When we declare a variable on one line, then initialze it later.
    3- When we want a variable o have a type that cann't be inferred.

Any Type:
  - A type just like a "string" or "boolean".
  - Means TS has no idia what this is.
  - Avoid variables with "Any" at all costs.
Fixing Any type:
  - add type Annotation.
-------------
Type Annotation with functions:
  - Type Annotation for functions: Code we add to tell Typescript what type pf arguments a function receive and what type of values it will return.
  - Type inference for functions: Typescript tries to figure out what type of value a function will return.
-------------
Arrays in Typescript:
  - each element with very consistent type of value (one a specific type of element).
-------------
Tuples:
  - Array-like strcture where each element represents some property of a record.
-------------
Interfaces:
  - Create a new type, describing the property names and value types of an object.
  - Interface is a structure that defines the contract in your application.
  - Classes that are derived from an interface must follow the structure provided by their interface.
q1: The goal of an interface is to:
answer: DEfine a new type.
q2: Take a look at the following code.  What will Typescript do to decide if coffeeCup is of type Cup ?
    interface Cup {
      volume: number;
      height: number;
    }
    const coffeeCup = {
      volume: 300,
      height: 20
    };
answer: Typescript will iterate through all the properties of the interface and make sure coffeeCup has the same properties with the same type.
q3: Does the pineTree object successfully implement the Tree interface?
    interface Tree {
      height: number;
      name: string;
    }
    const pineTree = {
      height: 1200,
      name: 'pine'
    };
answer: Yes.
q4: Does the washDishes object implement the Todo interface?
interface Todo {
  id: number;
  name: string;
  completed: boolean;
}
const washDishes = {
  id: 'AB20-49CD-11EA-4F2F',
  name: 'Do the dishes',
  completed: false
};
answer: No, because the Todo inference expects id to be a number, but washDishes provided a string.
q5: Does washDishes implement both the Todo and Model interfaces?
interface Todo {
  id: number;
  name: string;
  completed: boolean;
}
interface Model {
  id: number;
}
const washDishes = {
  id: 20,
  name: 'Do the dishes',
  completed: false
};
answer: Yes, because washDishes has all the same property names and types of Todo and Model.
-------------
Classes:
  - Blueprint to create an object with some fields (values) and methods (functions) to represent a 'thing'.
  - What is the different between Typescript Interfaces and Classes?
    # Interfaces: Allow for defining a type that will be used during design and compile time for strong typing. They can be "implemented" or "extended" but cannot be instantiated (you can't new them). They get removed when transpiling down to JS so they take up no space, but they also cannot be type checked during runtime, so you can't check if a variable implements a specific type at runtime (e.g. foo instanceof bar), except by checking the properties it has: Interface type check with Typescript.
    # When to use interfaces: Use them when you need to create a contract of the properties and functions for an object that will be used in more than one place in your code, especially more than one file or function. Also, use when you want other objects to start with this base set of properties, such as having a Vehicle interface that multiple classes implement as specific types of vehicles, like Car, Truck, Boat (e.g. class Car implements Vehicle).
    # When not to use interfaces: When you want to have default values, implementations, constructors, or functions (not just signatures).
    # Classes: Also allow for defining a type that will be used during design and compile time for strong typing, and, additional, can be used during runtime. This also means that the code is not compiled out, so it will take up space. This is one key difference mentioned by @Sakuto, but has more implications than just space. It means that classes can be typed checked, retaining the understanding of "who they are" even in the transpiled JS code. Further differences include: classes can be instantiated using new and can be extended, but not implemented. Classes can have constructors and actual function code along with default values.
    # When to use classes: When you want to create objects that have actual function code in them, have a constructor for initialization, and/or you want to create instances of them with new. Also, for simple data objects, you can use classes for setting up default values. Another time you would want to use them is when you are doing type checking, though there are workarounds for interfaces if needed (see the interface section OS link).
    # When not to use classes: When you have a simple data interface, do not need to instantiate it, when you want to have it implemented by other objects, when you want to simply put an interface on an existing object (think type definition files) or when the space it would take up is prohibitive or unwarranted. As a side note, if you look in .d.ts files you will notice that they only use interfaces and types, and thus this is completely removed when transpiled to TS.
  - Modifiers: keyword we can place on different methods and properties inside a class.
    # public. this method can be called any where, any time.
    # private. this method can onle be called by other methods in this class.
    # protected. this method can onle be called by other methods in this class, or by other methods in childe classes.
    * by default all methods in class is public.
-------------
Type Guards:
  - Type Guards allow you to narrow down the type of a variable within a conditional block.
    
